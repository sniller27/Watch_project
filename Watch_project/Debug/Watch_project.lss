
Watch_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000204  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000edf  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cf8  00000000  00000000  00001207  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000046c  00000000  00000000  00001eff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  0000236c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c8  00000000  00000000  0000242c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000020c  00000000  00000000  000029f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002c00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e0       	ldi	r30, 0x04	; 4
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 30       	cpi	r26, 0x00	; 0
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	6f c0       	rjmp	.+222    	; 0x200 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
// 	data = UDR0;
// 	flag_r=1;
// }

int main(void)
{  
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	64 97       	sbiw	r28, 0x14	; 20
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
//   
//    print_fonts();  //for test and then exclude the  clear_display(); call
//    //char text[]="en tekst string"; //string declared before use it in sendStrXY - 15 chars long incl spaces
//    clear_display();   //use this before writing you own text
   
   uart0_init(MYUBRRF); // UART0 init
 138:	87 e6       	ldi	r24, 0x67	; 103
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	12 d0       	rcall	.+36     	; 0x162 <uart0_init>
   //sei(); // enable global interrupt (prevents putchUSART0(getchUSART0()); from working)
   
   
   //char var[4];
   int i = 0;
   char buffer[20] = {0};
 13e:	fe 01       	movw	r30, r28
 140:	31 96       	adiw	r30, 0x01	; 1
 142:	84 e1       	ldi	r24, 0x14	; 20
 144:	df 01       	movw	r26, r30
 146:	1d 92       	st	X+, r1
 148:	8a 95       	dec	r24
 14a:	e9 f7       	brne	.-6      	; 0x146 <main+0x22>
	 //putchUSART0(getchUSART0());
	 //_delay_ms(1000);
	 
	 
	 // NEW
	 i = getsUSART0(buffer, 8);
 14c:	68 e0       	ldi	r22, 0x08	; 8
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	ce 01       	movw	r24, r28
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	32 d0       	rcall	.+100    	; 0x1ba <getsUSART0>
	 if(i==8){
 156:	88 30       	cpi	r24, 0x08	; 8
 158:	c9 f7       	brne	.-14     	; 0x14c <main+0x28>
		putsUSART0(buffer); 	 
 15a:	ce 01       	movw	r24, r28
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	21 d0       	rcall	.+66     	; 0x1a2 <putsUSART0>
 160:	f5 cf       	rjmp	.-22     	; 0x14c <main+0x28>

00000162 <uart0_init>:
**/
// init UART1
void uart0_init(unsigned int ubrr){
	
	// setting UCRSRn (USART Control and Status Register) (for A, B and C)
	UCSR0A=(1<<U2X0); // Full duplex // enable full duplex (aka. double speed?) (A register)
 162:	22 e0       	ldi	r18, 0x02	; 2
 164:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	UCSR0B|=(1<<RXEN0)|(1<<TXEN0);// enable receive + enable transmit + enable receive complete interrupt (B-register)
 168:	e1 ec       	ldi	r30, 0xC1	; 193
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	20 81       	ld	r18, Z
 16e:	28 61       	ori	r18, 0x18	; 24
 170:	20 83       	st	Z, r18
	
	// UCSZn s?ttes til 011. UCSZ02 er allerede 0, s? derfor s?ttes UCSZ00 og UCSZ01.
	UCSR0C|=(1<<UCSZ00)|(1<<UCSZ01); // set frame format (C-register) (8 bits, no parity, 1 start bit, 1 stop bit)
 172:	e2 ec       	ldi	r30, 0xC2	; 194
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	20 81       	ld	r18, Z
 178:	26 60       	ori	r18, 0x06	; 6
 17a:	20 83       	st	Z, r18
	
	// setting UBRRn (USART Baud Rate Register) (16 bits where H is 8 bit high and L is 8 bit low) (skal beregnes: se tabel i datablad)
	// datablad: s.207
	UBRR0H =(unsigned char)(ubrr>>8); // skriver de 8 h?je bit. (skiftes da der er 16 bit i alt i UBRRn)
 17c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L =(unsigned char)ubrr; // skriver de 8 lave bit.
 180:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 184:	08 95       	ret

00000186 <putchUSART0>:
/**
	UART CHARACTERS
**/
// transmit one byte/character
void putchUSART0(char tx){
	while(!(UCSR0A & (1<<UDRE0))); // UDREn er 0 ved transmission indtil transmit buffer er tom (venter p? at uart kan sende ny byte) (sker i UCSRnA registret)
 186:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 18a:	95 ff       	sbrs	r25, 5
 18c:	fc cf       	rjmp	.-8      	; 0x186 <putchUSART0>
	UDR0 = tx; // put data into buffer and send it (skriver til UDR registret...UART I/O Data Register)
 18e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 192:	08 95       	ret

00000194 <getchUSART0>:
}

// receive one byte/character (skal ikke bruges i UR-projekt => skal ersttes af service routine)
 char getchUSART0(void){
	while(!(UCSR0A & (1<<RXC0))); // RXCn er 0 ved transmission indtil der er modtaget en byte/character (vente p? at uart har modtaget en byte/character) (sker i UCSRnA registret)
 194:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 198:	88 23       	and	r24, r24
 19a:	e4 f7       	brge	.-8      	; 0x194 <getchUSART0>
	return UDR0; // get received data from buffer (modtager data fra UDR registret...UART I/O Data Register)
 19c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 1a0:	08 95       	ret

000001a2 <putsUSART0>:
/**
	UART STRINGS
**/

// transmit one string (by calling putsUSART0 continuously until whole string is sent)
void putsUSART0(char *ptr){
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	ec 01       	movw	r28, r24
	
	while(*ptr){
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <putsUSART0+0xc>
		putchUSART0(*ptr);
 1aa:	ed df       	rcall	.-38     	; 0x186 <putchUSART0>
		ptr++;
 1ac:	21 96       	adiw	r28, 0x01	; 1
**/

// transmit one string (by calling putsUSART0 continuously until whole string is sent)
void putsUSART0(char *ptr){
	
	while(*ptr){
 1ae:	88 81       	ld	r24, Y
 1b0:	81 11       	cpse	r24, r1
 1b2:	fb cf       	rjmp	.-10     	; 0x1aa <putsUSART0+0x8>
		putchUSART0(*ptr);
		ptr++;
	}
	
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <getsUSART0>:

// receive one string
char getsUSART0(char *p, int max){
 1ba:	ef 92       	push	r14
 1bc:	ff 92       	push	r15
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	7c 01       	movw	r14, r24
 1c6:	8b 01       	movw	r16, r22
	
	char cx;
	char i = 0;
	
	// i<max Prevent buffer overrun
	while(((cx = getchUSART0()) != 0x0D) && i<max){
 1c8:	e5 df       	rcall	.-54     	; 0x194 <getchUSART0>
 1ca:	c8 2f       	mov	r28, r24
 1cc:	8d 30       	cpi	r24, 0x0D	; 13
 1ce:	51 f4       	brne	.+20     	; 0x1e4 <getsUSART0+0x2a>
 1d0:	0c c0       	rjmp	.+24     	; 0x1ea <getsUSART0+0x30>
		putchUSART0(cx);
 1d2:	8c 2f       	mov	r24, r28
 1d4:	d8 df       	rcall	.-80     	; 0x186 <putchUSART0>
		*p=cx;
 1d6:	f7 01       	movw	r30, r14
 1d8:	c0 83       	st	Z, r28
		
		p++;
		i++;
		
		if (i==max)
 1da:	01 30       	cpi	r16, 0x01	; 1
 1dc:	11 05       	cpc	r17, r1
 1de:	49 f4       	brne	.+18     	; 0x1f2 <getsUSART0+0x38>
		{
			return i;	
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	08 c0       	rjmp	.+16     	; 0x1f4 <getsUSART0+0x3a>
	
	char cx;
	char i = 0;
	
	// i<max Prevent buffer overrun
	while(((cx = getchUSART0()) != 0x0D) && i<max){
 1e4:	10 16       	cp	r1, r16
 1e6:	11 06       	cpc	r1, r17
 1e8:	a4 f3       	brlt	.-24     	; 0x1d2 <getsUSART0+0x18>
		}else {
			return 0;
		}
	}
	
	*p=0;
 1ea:	f7 01       	movw	r30, r14
 1ec:	10 82       	st	Z, r1
	return 0;
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <getsUSART0+0x3a>
		
		if (i==max)
		{
			return i;	
		}else {
			return 0;
 1f2:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	*p=0;
	return 0;
	
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	ff 90       	pop	r15
 1fc:	ef 90       	pop	r14
 1fe:	08 95       	ret

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
