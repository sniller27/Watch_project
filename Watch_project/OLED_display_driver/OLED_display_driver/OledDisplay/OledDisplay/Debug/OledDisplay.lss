
OledDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000839  000008ad  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000008ad  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000160  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000027e0  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000f21  00000000  00000000  0000321c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000d0c  00000000  00000000  0000413d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000003c0  00000000  00000000  00004e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000481  00000000  00000000  0000520c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000f5a  00000000  00000000  0000568d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000190  00000000  00000000  000065e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000834  00000834  000008a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006778  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.I2C_Init 00000036  000006fc  000006fc  00000770  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.I2C_Start 00000048  000006b4  000006b4  00000728  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.I2C_Write 0000002c  00000732  00000732  000007a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.I2C_Stop 00000010  00000824  00000824  00000898  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.init    00000012  00000812  00000812  00000886  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .progmemx.data 00000010  00000448  00000448  000004bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 19 .text.main    00000062  00000652  00000652  000006c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.ssd1306_command 00000020  000007b6  000007b6  0000082a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.InitializeDisplay 00000098  00000458  00000458  000004cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.SendChar 00000020  000007d6  000007d6  0000084a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.setXY   0000002c  0000075e  0000075e  000007d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.clear_display 0000002c  0000078a  0000078a  000007fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.sendCharXY 00000064  000005ee  000005ee  00000662  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.sendStrXY 0000006a  00000584  00000584  000005f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.print_fonts 00000094  000004f0  000004f0  00000564  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .progmemx.data.myFont 00000300  00000148  00000148  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 29 .data._i2c_address 00000001  00800200  00000838  000008ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 30 .text.libgcc  0000001c  000007f6  000007f6  0000086a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
   4:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
   8:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
   c:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  10:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  14:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  18:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  1c:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  20:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  24:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  28:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  2c:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  30:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  34:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  38:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  3c:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  40:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  44:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  48:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  4c:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  50:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  54:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  58:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  5c:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  60:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  64:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  68:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  6c:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  70:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  74:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  78:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  7c:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  80:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  84:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  88:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  8c:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  90:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  94:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  98:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  9c:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  a0:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  a4:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  a8:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  ac:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  b0:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  b4:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  b8:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  bc:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  c0:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  c4:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  c8:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  cc:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  d0:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  d4:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  d8:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  dc:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>
  e0:	0c 94 1a 04 	jmp	0x834	; 0x834 <__bad_interrupt>

000000e4 <.dinit>:
  e4:	02 00       	.word	0x0002	; ????
  e6:	02 01       	movw	r0, r4
  e8:	00 08       	sbc	r0, r0
  ea:	38 00       	.word	0x0038	; ????

000000ec <__ctors_end>:
  ec:	11 24       	eor	r1, r1
  ee:	1f be       	out	0x3f, r1	; 63
  f0:	cf ef       	ldi	r28, 0xFF	; 255
  f2:	d1 e2       	ldi	r29, 0x21	; 33
  f4:	de bf       	out	0x3e, r29	; 62
  f6:	cd bf       	out	0x3d, r28	; 61
  f8:	00 e0       	ldi	r16, 0x00	; 0
  fa:	0c bf       	out	0x3c, r16	; 60

000000fc <__do_copy_data>:
  fc:	e4 ee       	ldi	r30, 0xE4	; 228
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	19 c0       	rjmp	.+50     	; 0x136 <__do_clear_bss+0x8>
 104:	b7 91       	elpm	r27, Z+
 106:	a7 91       	elpm	r26, Z+
 108:	37 91       	elpm	r19, Z+
 10a:	27 91       	elpm	r18, Z+
 10c:	07 91       	elpm	r16, Z+
 10e:	07 fd       	sbrc	r16, 7
 110:	0e c0       	rjmp	.+28     	; 0x12e <__do_clear_bss>
 112:	97 91       	elpm	r25, Z+
 114:	87 91       	elpm	r24, Z+
 116:	ef 01       	movw	r28, r30
 118:	f9 2f       	mov	r31, r25
 11a:	e8 2f       	mov	r30, r24
 11c:	0b bf       	out	0x3b, r16	; 59
 11e:	07 90       	elpm	r0, Z+
 120:	0d 92       	st	X+, r0
 122:	a2 17       	cp	r26, r18
 124:	b3 07       	cpc	r27, r19
 126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x22>
 128:	fe 01       	movw	r30, r28
 12a:	1b be       	out	0x3b, r1	; 59
 12c:	04 c0       	rjmp	.+8      	; 0x136 <__do_clear_bss+0x8>

0000012e <__do_clear_bss>:
 12e:	1d 92       	st	X+, r1
 130:	a2 17       	cp	r26, r18
 132:	b3 07       	cpc	r27, r19
 134:	e1 f7       	brne	.-8      	; 0x12e <__do_clear_bss>
 136:	eb 3e       	cpi	r30, 0xEB	; 235
 138:	f4 07       	cpc	r31, r20
 13a:	21 f7       	brne	.-56     	; 0x104 <__do_copy_data+0x8>
 13c:	0e 94 29 03 	call	0x652	; 0x652 <main>
 140:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>

Disassembly of section .text:

00000834 <__bad_interrupt>:
 834:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.I2C_Init:

000006fc <I2C_Init>:
char I2C_Read_Nack()		/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	return TWDR;		/* Return received data */
}
 6fc:	81 b1       	in	r24, 0x01	; 1
 6fe:	81 60       	ori	r24, 0x01	; 1
 700:	81 b9       	out	0x01, r24	; 1
 702:	82 b1       	in	r24, 0x02	; 2
 704:	81 60       	ori	r24, 0x01	; 1
 706:	82 b9       	out	0x02, r24	; 2
 708:	2f ef       	ldi	r18, 0xFF	; 255
 70a:	83 ed       	ldi	r24, 0xD3	; 211
 70c:	90 e3       	ldi	r25, 0x30	; 48
 70e:	21 50       	subi	r18, 0x01	; 1
 710:	80 40       	sbci	r24, 0x00	; 0
 712:	90 40       	sbci	r25, 0x00	; 0
 714:	e1 f7       	brne	.-8      	; 0x70e <I2C_Init+0x12>
 716:	00 c0       	rjmp	.+0      	; 0x718 <I2C_Init+0x1c>
 718:	00 00       	nop
 71a:	82 e1       	ldi	r24, 0x12	; 18
 71c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
 720:	e9 eb       	ldi	r30, 0xB9	; 185
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	80 81       	ld	r24, Z
 726:	8c 7f       	andi	r24, 0xFC	; 252
 728:	80 83       	st	Z, r24
 72a:	85 e0       	ldi	r24, 0x05	; 5
 72c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 730:	08 95       	ret

Disassembly of section .text.I2C_Start:

000006b4 <I2C_Start>:
 6b4:	94 ea       	ldi	r25, 0xA4	; 164
 6b6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 6ba:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 6be:	99 23       	and	r25, r25
 6c0:	e4 f7       	brge	.-8      	; 0x6ba <I2C_Start+0x6>
 6c2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 6c6:	98 7f       	andi	r25, 0xF8	; 248
 6c8:	98 30       	cpi	r25, 0x08	; 8
 6ca:	91 f4       	brne	.+36     	; 0x6f0 <I2C_Start+0x3c>
 6cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 6d0:	84 e8       	ldi	r24, 0x84	; 132
 6d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 6d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 6da:	88 23       	and	r24, r24
 6dc:	e4 f7       	brge	.-8      	; 0x6d6 <I2C_Start+0x22>
 6de:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 6e2:	88 7f       	andi	r24, 0xF8	; 248
 6e4:	88 31       	cpi	r24, 0x18	; 24
 6e6:	31 f0       	breq	.+12     	; 0x6f4 <I2C_Start+0x40>
 6e8:	80 32       	cpi	r24, 0x20	; 32
 6ea:	31 f4       	brne	.+12     	; 0x6f8 <I2C_Start+0x44>
 6ec:	82 e0       	ldi	r24, 0x02	; 2
 6ee:	08 95       	ret
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	08 95       	ret
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	08 95       	ret
 6f8:	83 e0       	ldi	r24, 0x03	; 3
 6fa:	08 95       	ret

Disassembly of section .text.I2C_Write:

00000732 <I2C_Write>:
 732:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 736:	84 e8       	ldi	r24, 0x84	; 132
 738:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 73c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 740:	88 23       	and	r24, r24
 742:	e4 f7       	brge	.-8      	; 0x73c <I2C_Write+0xa>
 744:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 748:	88 7f       	andi	r24, 0xF8	; 248
 74a:	88 32       	cpi	r24, 0x28	; 40
 74c:	21 f0       	breq	.+8      	; 0x756 <I2C_Write+0x24>
 74e:	80 33       	cpi	r24, 0x30	; 48
 750:	21 f4       	brne	.+8      	; 0x75a <I2C_Write+0x28>
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	08 95       	ret
 756:	80 e0       	ldi	r24, 0x00	; 0
 758:	08 95       	ret
 75a:	82 e0       	ldi	r24, 0x02	; 2
 75c:	08 95       	ret

Disassembly of section .text.I2C_Stop:

00000824 <I2C_Stop>:

void I2C_Stop()			/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
 824:	84 e9       	ldi	r24, 0x94	; 148
 826:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	while(TWCR&(1<<TWSTO));	/* Wait until stop condition execution */
 82a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 82e:	84 fd       	sbrc	r24, 4
 830:	fc cf       	rjmp	.-8      	; 0x82a <I2C_Stop+0x6>
 832:	08 95       	ret

Disassembly of section .text.init:

00000812 <init>:
#include <stdlib.h>

#include "I2C.h"  //include library for i2c driver
#include "ssd1306.h" //include display driver
void init(){
	PORTK|=0xFF;
 812:	e8 e0       	ldi	r30, 0x08	; 8
 814:	f1 e0       	ldi	r31, 0x01	; 1
 816:	80 81       	ld	r24, Z
 818:	8f ef       	ldi	r24, 0xFF	; 255
 81a:	80 83       	st	Z, r24
	DDRG |=0b00100000;  //D4 as output
 81c:	83 b3       	in	r24, 0x13	; 19
 81e:	80 62       	ori	r24, 0x20	; 32
 820:	83 bb       	out	0x13, r24	; 19
 822:	08 95       	ret

Disassembly of section .text.main:

00000652 <main>:
	
}

int main(void)
{  
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	cd b7       	in	r28, 0x3d	; 61
 658:	de b7       	in	r29, 0x3e	; 62
 65a:	60 97       	sbiw	r28, 0x10	; 16
 65c:	0f b6       	in	r0, 0x3f	; 63
 65e:	f8 94       	cli
 660:	de bf       	out	0x3e, r29	; 62
 662:	0f be       	out	0x3f, r0	; 63
 664:	cd bf       	out	0x3d, r28	; 61
	init();
 666:	0e 94 09 04 	call	0x812	; 0x812 <init>
	
  _i2c_address = 0X78; // write address for i2c interface
 66a:	88 e7       	ldi	r24, 0x78	; 120
 66c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
  
  I2C_Init();  //initialize i2c interface to display
 670:	0e 94 7e 03 	call	0x6fc	; 0x6fc <I2C_Init>
  InitializeDisplay(); //initialize  display
 674:	0e 94 2c 02 	call	0x458	; 0x458 <InitializeDisplay>
  
   print_fonts();  //for test and then exclude the  clear_display(); call
 678:	0e 94 78 02 	call	0x4f0	; 0x4f0 <print_fonts>
   char text[]="en tekst string"; //string declared before use it in sendStrXY - 15 chars long incl spaces
 67c:	28 e4       	ldi	r18, 0x48	; 72
 67e:	34 e0       	ldi	r19, 0x04	; 4
 680:	40 e0       	ldi	r20, 0x00	; 0
 682:	80 e1       	ldi	r24, 0x10	; 16
 684:	f9 01       	movw	r30, r18
 686:	de 01       	movw	r26, r28
 688:	11 96       	adiw	r26, 0x01	; 1
 68a:	74 2f       	mov	r23, r20
 68c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__movmemx_qi>
   clear_display();   //use this before writing you own text
 690:	0e 94 c5 03 	call	0x78a	; 0x78a <clear_display>
  while (1)
  {      
	 
	 sendCharXY('a',1,2);  //one char  - X is line number - from 0 -7 and Y number position of the char an the line - 15 chars 
 694:	42 e0       	ldi	r20, 0x02	; 2
 696:	50 e0       	ldi	r21, 0x00	; 0
 698:	61 e0       	ldi	r22, 0x01	; 1
 69a:	70 e0       	ldi	r23, 0x00	; 0
 69c:	81 e6       	ldi	r24, 0x61	; 97
 69e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <sendCharXY>
	 
	 sendStrXY(text,0,0); //line 0  -print the line of text
 6a2:	40 e0       	ldi	r20, 0x00	; 0
 6a4:	50 e0       	ldi	r21, 0x00	; 0
 6a6:	60 e0       	ldi	r22, 0x00	; 0
 6a8:	70 e0       	ldi	r23, 0x00	; 0
 6aa:	ce 01       	movw	r24, r28
 6ac:	01 96       	adiw	r24, 0x01	; 1
 6ae:	0e 94 c2 02 	call	0x584	; 0x584 <sendStrXY>
 6b2:	f0 cf       	rjmp	.-32     	; 0x694 <main+0x42>

Disassembly of section .text.ssd1306_command:

000007b6 <ssd1306_command>:

//==========================================================//
/** Turns display off.*/
void displayOff(void)
{
	ssd1306_command(0xae);		//display off p. 28
 7b6:	cf 93       	push	r28
 7b8:	c8 2f       	mov	r28, r24
 7ba:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 7be:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <I2C_Start>
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	0e 94 99 03 	call	0x732	; 0x732 <I2C_Write>
 7c8:	8c 2f       	mov	r24, r28
 7ca:	0e 94 99 03 	call	0x732	; 0x732 <I2C_Write>
 7ce:	0e 94 12 04 	call	0x824	; 0x824 <I2C_Stop>
 7d2:	cf 91       	pop	r28
 7d4:	08 95       	ret

Disassembly of section .text.InitializeDisplay:

00000458 <InitializeDisplay>:
 458:	8e ea       	ldi	r24, 0xAE	; 174
 45a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 45e:	85 ed       	ldi	r24, 0xD5	; 213
 460:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 464:	80 e8       	ldi	r24, 0x80	; 128
 466:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 46a:	88 ea       	ldi	r24, 0xA8	; 168
 46c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 470:	8f e3       	ldi	r24, 0x3F	; 63
 472:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 476:	83 ed       	ldi	r24, 0xD3	; 211
 478:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 482:	80 e4       	ldi	r24, 0x40	; 64
 484:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 488:	8d e8       	ldi	r24, 0x8D	; 141
 48a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 48e:	84 e1       	ldi	r24, 0x14	; 20
 490:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 494:	80 e2       	ldi	r24, 0x20	; 32
 496:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 4a0:	81 ea       	ldi	r24, 0xA1	; 161
 4a2:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 4a6:	88 ec       	ldi	r24, 0xC8	; 200
 4a8:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 4ac:	8a ed       	ldi	r24, 0xDA	; 218
 4ae:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 4b2:	82 e1       	ldi	r24, 0x12	; 18
 4b4:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 4b8:	81 e8       	ldi	r24, 0x81	; 129
 4ba:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 4be:	8f ec       	ldi	r24, 0xCF	; 207
 4c0:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 4c4:	89 ed       	ldi	r24, 0xD9	; 217
 4c6:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 4ca:	81 ef       	ldi	r24, 0xF1	; 241
 4cc:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 4d0:	8b ed       	ldi	r24, 0xDB	; 219
 4d2:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 4d6:	80 e4       	ldi	r24, 0x40	; 64
 4d8:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 4dc:	84 ea       	ldi	r24, 0xA4	; 164
 4de:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 4e2:	86 ea       	ldi	r24, 0xA6	; 166
 4e4:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 4e8:	8f ea       	ldi	r24, 0xAF	; 175
 4ea:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 4ee:	08 95       	ret

Disassembly of section .text.SendChar:

000007d6 <SendChar>:
//==========================================================//
/** Actually this sends a byte, not a char to draw in the display.
* Displays chars uses 8 byte font the small ones and 96 bytes
* for the big number font.*/
void SendChar(unsigned char data)
{
 7d6:	cf 93       	push	r28
 7d8:	c8 2f       	mov	r28, r24
	I2C_Start(_i2c_address); // begin transmitting
 7da:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 7de:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <I2C_Start>
	I2C_Write(0x40);//data mode
 7e2:	80 e4       	ldi	r24, 0x40	; 64
 7e4:	0e 94 99 03 	call	0x732	; 0x732 <I2C_Write>
	I2C_Write(data);
 7e8:	8c 2f       	mov	r24, r28
 7ea:	0e 94 99 03 	call	0x732	; 0x732 <I2C_Write>
	I2C_Stop();    // stop transmitting
 7ee:	0e 94 12 04 	call	0x824	; 0x824 <I2C_Stop>
}
 7f2:	cf 91       	pop	r28
 7f4:	08 95       	ret

Disassembly of section .text.setXY:

0000075e <setXY>:

//==========================================================//
/** Turns display off.*/
void displayOff(void)
{
	ssd1306_command(0xae);		//display off p. 28
 75e:	cf 93       	push	r28
 760:	c6 2f       	mov	r28, r22
 762:	80 55       	subi	r24, 0x50	; 80
 764:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 768:	8c 2f       	mov	r24, r28
 76a:	88 0f       	add	r24, r24
 76c:	88 0f       	add	r24, r24
 76e:	88 0f       	add	r24, r24
 770:	88 70       	andi	r24, 0x08	; 8
 772:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 776:	8c 2f       	mov	r24, r28
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	96 95       	lsr	r25
 77c:	87 95       	ror	r24
 77e:	8f 70       	andi	r24, 0x0F	; 15
 780:	80 5f       	subi	r24, 0xF0	; 240
 782:	0e 94 db 03 	call	0x7b6	; 0x7b6 <ssd1306_command>
 786:	cf 91       	pop	r28
 788:	08 95       	ret

Disassembly of section .text.clear_display:

0000078a <clear_display>:
 78a:	cf 93       	push	r28
 78c:	df 93       	push	r29
 78e:	d0 e0       	ldi	r29, 0x00	; 0
 790:	0d c0       	rjmp	.+26     	; 0x7ac <clear_display+0x22>
 792:	60 e0       	ldi	r22, 0x00	; 0
 794:	8d 2f       	mov	r24, r29
 796:	0e 94 af 03 	call	0x75e	; 0x75e <setXY>
 79a:	c0 e0       	ldi	r28, 0x00	; 0
 79c:	04 c0       	rjmp	.+8      	; 0x7a6 <clear_display+0x1c>
 79e:	80 e0       	ldi	r24, 0x00	; 0
 7a0:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <SendChar>
 7a4:	cf 5f       	subi	r28, 0xFF	; 255
 7a6:	cc 23       	and	r28, r28
 7a8:	d4 f7       	brge	.-12     	; 0x79e <clear_display+0x14>
 7aa:	df 5f       	subi	r29, 0xFF	; 255
 7ac:	d8 30       	cpi	r29, 0x08	; 8
 7ae:	88 f3       	brcs	.-30     	; 0x792 <clear_display+0x8>
 7b0:	df 91       	pop	r29
 7b2:	cf 91       	pop	r28
 7b4:	08 95       	ret

Disassembly of section .text.sendCharXY:

000005ee <sendCharXY>:
 5ee:	1f 93       	push	r17
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29
 5f4:	18 2f       	mov	r17, r24
 5f6:	86 2f       	mov	r24, r22
 5f8:	64 2f       	mov	r22, r20
 5fa:	0e 94 af 03 	call	0x75e	; 0x75e <setXY>
 5fe:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 602:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <I2C_Start>
 606:	80 e4       	ldi	r24, 0x40	; 64
 608:	0e 94 99 03 	call	0x732	; 0x732 <I2C_Write>
 60c:	c0 e0       	ldi	r28, 0x00	; 0
 60e:	d0 e0       	ldi	r29, 0x00	; 0
 610:	17 c0       	rjmp	.+46     	; 0x640 <sendCharXY+0x52>
 612:	81 2f       	mov	r24, r17
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	80 97       	sbiw	r24, 0x20	; 32
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	88 0f       	add	r24, r24
 61e:	99 1f       	adc	r25, r25
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	a0 e0       	ldi	r26, 0x00	; 0
 626:	88 5b       	subi	r24, 0xB8	; 184
 628:	9e 4f       	sbci	r25, 0xFE	; 254
 62a:	af 4f       	sbci	r26, 0xFF	; 255
 62c:	8c 0f       	add	r24, r28
 62e:	9d 1f       	adc	r25, r29
 630:	a1 1d       	adc	r26, r1
 632:	d7 fd       	sbrc	r29, 7
 634:	aa 95       	dec	r26
 636:	fc 01       	movw	r30, r24
 638:	84 91       	lpm	r24, Z
 63a:	0e 94 99 03 	call	0x732	; 0x732 <I2C_Write>
 63e:	21 96       	adiw	r28, 0x01	; 1
 640:	c8 30       	cpi	r28, 0x08	; 8
 642:	d1 05       	cpc	r29, r1
 644:	34 f3       	brlt	.-52     	; 0x612 <sendCharXY+0x24>
 646:	0e 94 12 04 	call	0x824	; 0x824 <I2C_Stop>
 64a:	df 91       	pop	r29
 64c:	cf 91       	pop	r28
 64e:	1f 91       	pop	r17
 650:	08 95       	ret

Disassembly of section .text.sendStrXY:

00000584 <sendStrXY>:
 584:	0f 93       	push	r16
 586:	1f 93       	push	r17
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	ec 01       	movw	r28, r24
 58e:	86 2f       	mov	r24, r22
 590:	06 2f       	mov	r16, r22
 592:	64 2f       	mov	r22, r20
 594:	0e 94 af 03 	call	0x75e	; 0x75e <setXY>
 598:	22 c0       	rjmp	.+68     	; 0x5de <sendStrXY+0x5a>
 59a:	8a 30       	cpi	r24, 0x0A	; 10
 59c:	31 f4       	brne	.+12     	; 0x5aa <sendStrXY+0x26>
 59e:	60 e0       	ldi	r22, 0x00	; 0
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	80 0f       	add	r24, r16
 5a4:	0e 94 af 03 	call	0x75e	; 0x75e <setXY>
 5a8:	21 96       	adiw	r28, 0x01	; 1
 5aa:	10 e0       	ldi	r17, 0x00	; 0
 5ac:	15 c0       	rjmp	.+42     	; 0x5d8 <sendStrXY+0x54>
 5ae:	88 81       	ld	r24, Y
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	80 97       	sbiw	r24, 0x20	; 32
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	88 0f       	add	r24, r24
 5be:	99 1f       	adc	r25, r25
 5c0:	a0 e0       	ldi	r26, 0x00	; 0
 5c2:	88 5b       	subi	r24, 0xB8	; 184
 5c4:	9e 4f       	sbci	r25, 0xFE	; 254
 5c6:	af 4f       	sbci	r26, 0xFF	; 255
 5c8:	81 0f       	add	r24, r17
 5ca:	91 1d       	adc	r25, r1
 5cc:	a1 1d       	adc	r26, r1
 5ce:	fc 01       	movw	r30, r24
 5d0:	84 91       	lpm	r24, Z
 5d2:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <SendChar>
 5d6:	1f 5f       	subi	r17, 0xFF	; 255
 5d8:	18 30       	cpi	r17, 0x08	; 8
 5da:	48 f3       	brcs	.-46     	; 0x5ae <sendStrXY+0x2a>
 5dc:	21 96       	adiw	r28, 0x01	; 1
 5de:	88 81       	ld	r24, Y
 5e0:	81 11       	cpse	r24, r1
 5e2:	db cf       	rjmp	.-74     	; 0x59a <sendStrXY+0x16>
 5e4:	df 91       	pop	r29
 5e6:	cf 91       	pop	r28
 5e8:	1f 91       	pop	r17
 5ea:	0f 91       	pop	r16
 5ec:	08 95       	ret

Disassembly of section .text.print_fonts:

000004f0 <print_fonts>:
 4f0:	df 92       	push	r13
 4f2:	ef 92       	push	r14
 4f4:	ff 92       	push	r15
 4f6:	0f 93       	push	r16
 4f8:	1f 93       	push	r17
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	0e 94 c5 03 	call	0x78a	; 0x78a <clear_display>
 502:	e1 2c       	mov	r14, r1
 504:	f1 2c       	mov	r15, r1
 506:	68 94       	set
 508:	dd 24       	eor	r13, r13
 50a:	d5 f8       	bld	r13, 5
 50c:	2f c0       	rjmp	.+94     	; 0x56c <print_fonts+0x7c>
 50e:	60 e0       	ldi	r22, 0x00	; 0
 510:	8e 2d       	mov	r24, r14
 512:	0e 94 af 03 	call	0x75e	; 0x75e <setXY>
 516:	00 e0       	ldi	r16, 0x00	; 0
 518:	10 e0       	ldi	r17, 0x00	; 0
 51a:	20 c0       	rjmp	.+64     	; 0x55c <print_fonts+0x6c>
 51c:	c8 01       	movw	r24, r16
 51e:	8d 0d       	add	r24, r13
 520:	91 1d       	adc	r25, r1
 522:	80 97       	sbiw	r24, 0x20	; 32
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	a0 e0       	ldi	r26, 0x00	; 0
 532:	88 5b       	subi	r24, 0xB8	; 184
 534:	9e 4f       	sbci	r25, 0xFE	; 254
 536:	af 4f       	sbci	r26, 0xFF	; 255
 538:	8c 0f       	add	r24, r28
 53a:	9d 1f       	adc	r25, r29
 53c:	a1 1d       	adc	r26, r1
 53e:	d7 fd       	sbrc	r29, 7
 540:	aa 95       	dec	r26
 542:	fc 01       	movw	r30, r24
 544:	84 91       	lpm	r24, Z
 546:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <SendChar>
 54a:	21 96       	adiw	r28, 0x01	; 1
 54c:	02 c0       	rjmp	.+4      	; 0x552 <print_fonts+0x62>
 54e:	c0 e0       	ldi	r28, 0x00	; 0
 550:	d0 e0       	ldi	r29, 0x00	; 0
 552:	c8 30       	cpi	r28, 0x08	; 8
 554:	d1 05       	cpc	r29, r1
 556:	14 f3       	brlt	.-60     	; 0x51c <print_fonts+0x2c>
 558:	0f 5f       	subi	r16, 0xFF	; 255
 55a:	1f 4f       	sbci	r17, 0xFF	; 255
 55c:	00 31       	cpi	r16, 0x10	; 16
 55e:	11 05       	cpc	r17, r1
 560:	b4 f3       	brlt	.-20     	; 0x54e <print_fonts+0x5e>
 562:	f0 e1       	ldi	r31, 0x10	; 16
 564:	df 0e       	add	r13, r31
 566:	8f ef       	ldi	r24, 0xFF	; 255
 568:	e8 1a       	sub	r14, r24
 56a:	f8 0a       	sbc	r15, r24
 56c:	e6 e0       	ldi	r30, 0x06	; 6
 56e:	ee 16       	cp	r14, r30
 570:	f1 04       	cpc	r15, r1
 572:	6c f2       	brlt	.-102    	; 0x50e <print_fonts+0x1e>
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	1f 91       	pop	r17
 57a:	0f 91       	pop	r16
 57c:	ff 90       	pop	r15
 57e:	ef 90       	pop	r14
 580:	df 90       	pop	r13
 582:	08 95       	ret

Disassembly of section .text.libgcc:

000007f6 <__movmemx_qi>:
 7f6:	99 27       	eor	r25, r25

000007f8 <__movmemx_hi>:
 7f8:	77 fd       	sbrc	r23, 7
 7fa:	06 c0       	rjmp	.+12     	; 0x808 <__movmemx_hi+0x10>
 7fc:	7b bf       	out	0x3b, r23	; 59
 7fe:	07 90       	elpm	r0, Z+
 800:	0d 92       	st	X+, r0
 802:	01 97       	sbiw	r24, 0x01	; 1
 804:	e1 f7       	brne	.-8      	; 0x7fe <__movmemx_hi+0x6>
 806:	08 95       	ret
 808:	01 90       	ld	r0, Z+
 80a:	0d 92       	st	X+, r0
 80c:	01 97       	sbiw	r24, 0x01	; 1
 80e:	e1 f7       	brne	.-8      	; 0x808 <__movmemx_hi+0x10>
 810:	08 95       	ret
